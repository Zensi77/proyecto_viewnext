---
apiVersion: v1
kind: Namespace
metadata:
  name: app
  labels:
    name: app
---
apiVersion: v1
kind: Namespace
metadata:
  name: stats
  labels:
    name: stats
---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: app-quota
  namespace: app
spec:
  hard:
    pods: 6
    requests.cpu: 2
    requests.memory: 2Gi
    limits.cpu: 3
    limits.memory: 4Gi

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: stats-quota
  namespace: stats
spec:
  hard:
    pods: 4
    requests.cpu: 2
    requests.memory: 4Gi
    limits.cpu: 3
    limits.memory: 6Gi

---
apiVersion: v1
kind: LimitRange
metadata:
  name: app-limitrange
  namespace: app
spec:
  limits:
    - max:
        cpu: 1
        memory: 1Gi
      min:
        cpu: 0.1
        memory: 128Mi
      default:
        cpu: 0.5
        memory: 512Mi
      defaultRequest:
        cpu: 0.2
        memory: 256Mi
      type: Container
---
apiVersion: v1
kind: LimitRange
metadata:
  name: stats-limitrange
  namespace: stats
spec:
  limits:
    - max:
        cpu: 1.5
        memory: 2Gi
      min:
        cpu: 0.1
        memory: 128Mi
      type: Container
---
apiVersion: v1
kind: Secret
metadata:
  namespace: app
  name: credentials-sql
type: Opaque
stringData:
  dbname: tienda-vn
  username: root
  password: 'root'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: app
spec:
  selector:
    matchLabels:
      app: mysql
  replicas: 1
  template:
    metadata:
      labels:
        app: mysql      
    spec:
      containers:
        - name: mysql
          image: mysql:8
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials-sql
                  key: password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: credentials-sql
                  key: dbname
          ports:
            - containerPort: 3306
          volumeMounts:
            - mountPath: /var/lib/mysql
              name: mysql-storage
          resources:
            requests:
              cpu: "120m"
              memory: "512Mi"
            limits:
              cpu: "200m"
              memory: "1Gi"
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: app
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: elastic-pvc
  namespace: stats
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 512Mi
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: elasticsearch
#  namespace: stats
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: elasticsearch
#  template:
#    metadata:
#      labels:
#        app: elasticsearch
#    spec:
#      containers:
#        - name: elasticsearch
#          image: elasticsearch:7.6.2
#          ports:
#            - containerPort: 9200
#          env:
#            - name: ES_JAVA_OPTS
#              value: '-Xms512m -Xmx512m'
#            - name: discovery.type
#              value: 'single-node'
#          resources:
#            requests:
#              memory: '1Gi'
#              cpu: '1'
#            limits:
#              memory: '2Gi'
#              cpu: '1.5'
#          volumeMounts:
#            - name: data
#              mountPath: /usr/share/elasticsearch/data
#      volumes:
#        - name: data
#          persistentVolumeClaim:
#            claimName: elastic-pvc
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: kibana
#  namespace: stats
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: kibana
#  template:
#    metadata:
#      labels:
#        app: kibana
#    spec:
#      containers:
#        - name: kibana
#          image: docker.elastic.co/kibana/kibana:7.6.2
#          ports:
#            - containerPort: 5601
#          env:
#            - name: ELASTICSEARCH_HOSTS
#              value: 'http://elasticsearch:9200'
#          resources:
#            requests:
#              memory: '1Gi'
#              cpu: '1'
#            limits:
#              memory: '2Gi'
#              cpu: '1'
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: stats
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      targetPort: 9200
---
apiVersion: v1
kind: Service
metadata:
  name: kibana
  namespace: stats
spec:
  selector:
    app: kibana
  type: NodePort
  ports:
    - port: 5601
      targetPort: 5601
      nodePort: 30001
---
apiVersion: v1
kind: Secret
metadata:
  namespace: app
  name: credentials-artemis
type: Opaque
stringData:
  username: admin
  password: 'admin'
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: artemis-pvc
  namespace: app
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: artemis
  namespace: app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: artemis
  template:
    metadata:
      labels:
        app: artemis
    spec:
      containers:
        - name: artemis-mq
          image: apache/activemq-artemis:2.40.0
          env:
            - name: ARTEMIS_USER
              valueFrom:
                secretKeyRef:
                  name: credentials-artemis
                  key: username
            - name: ARTEMIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials-artemis
                  key: password
          resources:
            requests:
              cpu: "300m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "768Mi"

          ports:
            - containerPort: 61616
            - containerPort: 8161
          volumeMounts:
            - name: data
              mountPath: /var/lib/artemis-instance
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: artemis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: artemis
  namespace: app
spec:
  selector:
    app: artemis
  ports:
    - name: artemis
      protocol: TCP
      port: 61616
      targetPort: 61616
    - name: web
      protocol: TCP
      port: 8161
      targetPort: 8161
---
apiVersion: v1
kind: Secret
metadata:
  name: credentials-infinispan
  namespace: app
type: Opaque
stringData:
  username: admin123
  password: 'admin123'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cache
  namespace: app
  labels:
    app: cache
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cache
  template:
    metadata:
      labels:
        app: cache
    spec:
      containers:
        - name: infinispan
          image: infinispan/server:14.0.5.Final
          ports:
            - containerPort: 11222
          env:
            - name: USER
              valueFrom:
                secretKeyRef:
                  name: credentials-infinispan
                  key: username
            - name: PASS
              valueFrom:
                secretKeyRef:
                  name: credentials-infinispan
                  key: password
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "768Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: cache
  namespace: app
spec:
  selector:
    app: cache
  ports:
    - protocol: TCP
      port: 11222
      targetPort: 11222
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consumer
  namespace: stats
  labels:
    app: consumer
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consumer
  template:
    metadata:
      labels:
        app: consumer
    spec:
      containers:
        - name: consumer
          image: juanmaespi7/tecnoshop-consumer:latest
          resources:
            requests:
              cpu: "120m"
              memory: "256Mi"
            limits:
              cpu: "200m"
              memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: consumer
  labels:
    app: consumer
  namespace: stats
spec:
  type: ClusterIP
  selector:
    app: consumer
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
---
apiVersion: v1
kind: Secret
metadata:
  name: connection-sql
  namespace: app
type: Opaque
stringData:
  JDBC_DATABASE_URL: jdbc:mysql://mysql:3306/tienda-vn?createDatabaseIfNotExist=true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: app
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: juanmaespi7/tecnoshop-front:latest
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    app: frontend
  namespace: app
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30081
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: app
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: juanmaespi7/tecnoshop-back:latest
          ports:
            - containerPort: 8080
          env:
            - name: JDBC_DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: connection-sql
                  key: JDBC_DATABASE_URL
          #livenessProbe:
          #  httpGet:
          #    path: /actuator/health/liveness
          #    port: 8080
          #  initialDelaySeconds: 30
          #  periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  labels:
    app: backend
  namespace: app
spec:
  type: NodePort
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8080
      nodePort: 30080
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: scrapping
#  namespace: app
#  labels:
#    app: scrapping
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: scrapping
#  template:
#    metadata:
#      labels:
#        app: scrapping
#    spec:
#      containers:
#        - name: scrapping
#          image: scrapping:latest
#          env:
#            - name: DB_NAME
#              valueFrom:
#                secretKeyRef:
#                  name: credentials-sql
#                  key: dbname
#            - name: DB_USER
#              valueFrom:
#                secretKeyRef:
#                  name: credentials-sql
#                  key: username
#            - name: DB_PASSWORD
#              valueFrom:
#                secretKeyRef:
#                  name: credentials-sql
#                  key: password
#            - name: DB_HOST
#              value: mysql
#            - name: DB_PORT
#              value: '3306'
#            - name: OLLAMA_HOST
#              value: ollama
---
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: ollama
#  namespace: app
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: ollama
#  template:
#    metadata:
#      labels:
#        app: ollama
#    spec:
#      containers:
#        - name: ollama
#          image: ollama/ollama:latest
#          ports:
#            - containerPort: 11434
#          command: ['/bin/sh', '-c']
#          args:
#            - |
#              ollama serve &
#              sleep 3
#              ollama pull mistral
#              tail -f /dev/null
#          volumeMounts:
#            - name: ollama-data
#              mountPath: /root/.ollama
#      volumes:
#        - name: ollama-data
#          emptyDir: {}
#
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: ollama
#  labels:
#    app: ollama
#  namespace: app
#spec:
#  type: ClusterIP
#  selector:
#    app: ollama
#  ports:
#    - protocol: TCP
#      port: 11434
#      targetPort: 11434
